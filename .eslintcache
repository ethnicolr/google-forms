[{"C:\\Front\\google-forms\\src\\index.js":"1","C:\\Front\\google-forms\\src\\reportWebVitals.js":"2","C:\\Front\\google-forms\\src\\app\\App.js":"3","C:\\Front\\google-forms\\src\\app\\features\\question\\questionPage.js":"4","C:\\Front\\google-forms\\src\\app\\lib.js":"5","C:\\Front\\google-forms\\src\\app\\hooks\\useOnClickOutside.js":"6","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRender.js":"7","C:\\Front\\google-forms\\src\\app\\features\\question\\questionSwitch.js":"8","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js":"9","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRange.js":"10","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeText.js":"11","C:\\Front\\google-forms\\src\\app\\components\\Select.js":"12","C:\\Front\\google-forms\\src\\app\\components\\Option.js":"13","C:\\Front\\google-forms\\src\\app\\assets\\icons.js":"14","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelectItem.js":"15","C:\\Front\\google-forms\\src\\app\\hooks\\useSelectState.js":"16","C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormPage.js":"17","C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormGrid.js":"18","C:\\Front\\google-forms\\src\\app\\features\\question\\questionHead.js":"19","C:\\Front\\google-forms\\src\\app\\components\\Header.js":"20","C:\\Front\\google-forms\\src\\app\\components\\Container.js":"21","C:\\Front\\google-forms\\src\\app\\components\\Wrapper.js":"22","C:\\Front\\google-forms\\src\\app\\features\\question\\questionList.js":"23","C:\\Front\\google-forms\\src\\app\\hooks\\useQuestionState.js":"24","C:\\Front\\google-forms\\src\\app\\reducers\\globalState.js":"25","C:\\Front\\google-forms\\src\\app\\hooks\\useGlobalState.js":"26"},{"size":458,"mtime":1614504544179,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1614504544179,"results":"29","hashOfConfig":"28"},{"size":1898,"mtime":1618388555519,"results":"30","hashOfConfig":"28"},{"size":1889,"mtime":1618496378613,"results":"31","hashOfConfig":"28"},{"size":2327,"mtime":1618496216050,"results":"32","hashOfConfig":"28"},{"size":418,"mtime":1615552893135,"results":"33","hashOfConfig":"28"},{"size":1864,"mtime":1618500289234,"results":"34","hashOfConfig":"28"},{"size":1639,"mtime":1618299335025,"results":"35","hashOfConfig":"28"},{"size":3315,"mtime":1618500866817,"results":"36","hashOfConfig":"28"},{"size":1887,"mtime":1615557183700,"results":"37","hashOfConfig":"28"},{"size":548,"mtime":1615473971516,"results":"38","hashOfConfig":"28"},{"size":2492,"mtime":1618497129151,"results":"39","hashOfConfig":"28"},{"size":535,"mtime":1618496866152,"results":"40","hashOfConfig":"28"},{"size":21405,"mtime":1618496456479,"results":"41","hashOfConfig":"28"},{"size":2134,"mtime":1618496337890,"results":"42","hashOfConfig":"28"},{"size":1014,"mtime":1618388983464,"results":"43","hashOfConfig":"28"},{"size":1919,"mtime":1618389731768,"results":"44","hashOfConfig":"28"},{"size":1279,"mtime":1614773518542,"results":"45","hashOfConfig":"28"},{"size":978,"mtime":1618493722720,"results":"46","hashOfConfig":"28"},{"size":1323,"mtime":1618493512800,"results":"47","hashOfConfig":"28"},{"size":1106,"mtime":1615475264998,"results":"48","hashOfConfig":"28"},{"size":792,"mtime":1615552530345,"results":"49","hashOfConfig":"28"},{"size":506,"mtime":1615296656925,"results":"50","hashOfConfig":"28"},{"size":1096,"mtime":1614504544178,"results":"51","hashOfConfig":"28"},{"size":1889,"mtime":1618388503162,"results":"52","hashOfConfig":"28"},{"size":1133,"mtime":1618388608125,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"2k6uk2",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Front\\google-forms\\src\\index.js",[],["114","115"],"C:\\Front\\google-forms\\src\\reportWebVitals.js",[],"C:\\Front\\google-forms\\src\\app\\App.js",["116"],"/** @jsxImportSource @emotion/react */\r\n\r\nimport React from 'react'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Header from './components/Header'\r\nimport QuestionList from './features/question/questionList'\r\nimport ViewForm from './features/view/viewFormPage'\r\nimport { useGlobalState } from './hooks/useGlobalState'\r\nimport { Button } from './lib'\r\nimport Container from './components/Container'\r\nimport Wrapper, { useContextEditMod } from './components/Wrapper'\r\n\r\nexport const StateContex = React.createContext()\r\n\r\nconst initialState = {\r\n  questions: [],\r\n  header: { title: 'Новая форма', desc: 'Описание' },\r\n}\r\n\r\nfunction App() {\r\n  const {\r\n    state,\r\n    addQuestion,\r\n    editQuestion,\r\n    editHeader,\r\n    deleteQuestion,\r\n    cloneQuestion,\r\n  } = useGlobalState('formData', initialState)\r\n\r\n  const value = { state, editQuestion, deleteQuestion, cloneQuestion }\r\n\r\n  return (\r\n    <Router>\r\n      <div\r\n        css={{\r\n          margin: '100px auto',\r\n          width: '650px',\r\n        }}\r\n      >\r\n        <StateContex.Provider value={value}>\r\n          <Route exact path='/'>\r\n            <Wrapper>\r\n              <Container>\r\n                <Header data={state.header} changeStateHeader={editHeader} />\r\n              </Container>\r\n            </Wrapper>\r\n            <QuestionList questions={state.questions} />\r\n            <div>\r\n              <Button onClick={addQuestion} variant='contained'>\r\n                Add question\r\n              </Button>\r\n              <Button onClick={() => window.open('/view')}>View</Button>\r\n            </div>\r\n          </Route>\r\n\r\n          <Route exact path='/view'>\r\n            <ViewForm />\r\n          </Route>\r\n        </StateContex.Provider>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport function useContextState() {\r\n  return React.useContext(StateContex)\r\n}\r\n\r\nexport default App\r\n","C:\\Front\\google-forms\\src\\app\\features\\question\\questionPage.js",["117","118"],"C:\\Front\\google-forms\\src\\app\\lib.js",[],"C:\\Front\\google-forms\\src\\app\\hooks\\useOnClickOutside.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRender.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionSwitch.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js",["119","120","121","122","123"],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRange.js",["124"],"import React, { useState, useEffect } from 'react'\r\nimport Select from './../../components/Select'\r\nimport Option from './../../components/Option'\r\nimport { Input } from './../../lib'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function QuestionTypeRange({ updateParameters }) {\r\n  const [rangeState, setRangeState] = useState({\r\n    from: 0,\r\n    to: 10,\r\n    labelFrom: '',\r\n    labelTo: '',\r\n  })\r\n\r\n  const handleChange = (key) => {\r\n    return (value) => {\r\n      setRangeState((range) => ({\r\n        ...range,\r\n        [key]: value,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handleChangeInput = (e) => {\r\n    const { name, value } = e.target\r\n    setRangeState((range) => ({\r\n      ...range,\r\n      [name]: value,\r\n    }))\r\n  }\r\n  useEffect(() => {\r\n    updateParameters(rangeState, 'range')\r\n  }, [updateParameters, rangeState])\r\n\r\n  return (\r\n    <div>\r\n      <Select\r\n        onChange={handleChange('from')}\r\n        widthList='55px'\r\n        css={{ width: '50px', border: 'none' }}\r\n        cssList={{ width: '50px' }}\r\n      >\r\n        <Option value='number-1'>1</Option>\r\n        <Option value='number-2'>2</Option>\r\n      </Select>\r\n\r\n      <Select\r\n        onChange={handleChange('to')}\r\n        widthList='55px'\r\n        css={{ width: '50px', border: 'none' }}\r\n        cssList={{ width: '50px' }}\r\n      >\r\n        {Array.from({ length: 10 }, (_, i) => i + 1).map((value) => (\r\n          <Option value={`number-${value}`}>{value}</Option>\r\n        ))}\r\n      </Select>\r\n      <Input\r\n        placeholder='Подпись (необязательно)'\r\n        name='labelFrom'\r\n        value={rangeState.labelFrom}\r\n        onChange={handleChangeInput}\r\n      />\r\n      <Input\r\n        placeholder='Подпись (необязательно)'\r\n        name='labelTo'\r\n        value={rangeState.labelTo}\r\n        onChange={handleChangeInput}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeText.js",[],"C:\\Front\\google-forms\\src\\app\\components\\Select.js",[],"C:\\Front\\google-forms\\src\\app\\components\\Option.js",[],"C:\\Front\\google-forms\\src\\app\\assets\\icons.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelectItem.js",["125"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useEffect, useRef } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { useContextEditMod } from './../../components/Wrapper'\r\nimport { UnRadio, UnCheckBox } from './../../assets/icons'\r\nimport * as Icon from './../../assets/icons'\r\n\r\nimport { ButtonIcon } from './../../lib'\r\n\r\nconst Input = styled.input`\r\n  padding: 0;\r\n  width: 100%;\r\n  heigt: 100%;\r\n  border: none;\r\n  outline: none;\r\n  padding: 15px 10px;\r\n  border: 1px solid transparent;\r\n  fontsize: 14px;\r\n  &:hover {\r\n    border-bottom: ${(props) =>\r\n      props.isEdit ? '1px solid rgba(0, 0, 0, 0.12)' : 'none'};\r\n  }\r\n`\r\n\r\nexport default function QuestionTypeSelectItem({\r\n  value,\r\n  onChange,\r\n  onDelete,\r\n  id,\r\n  type,\r\n  index,\r\n  length,\r\n  head,\r\n}) {\r\n  const inputEl = useRef(null)\r\n  const [edit] = useContextEditMod()\r\n\r\n  const handleChange = (e) => {\r\n    onChange(id, e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    inputEl.current.focus()\r\n    inputEl.current.select()\r\n  }, [])\r\n\r\n  const IconType = (type) => {\r\n    const icons = {\r\n      radio: <UnRadio />,\r\n      drop: (\r\n        <div\r\n          css={{\r\n            width: '20px',\r\n            height: '20px',\r\n            marginRight: '10px',\r\n            fontSize: '14px',\r\n          }}\r\n        >{`${index + 1}.`}</div>\r\n      ),\r\n      checkbox: <UnCheckBox />,\r\n    }\r\n    return icons[type]\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n      }}\r\n    >\r\n      {head === 'column' ? `${index + 1}.` : IconType(type)}\r\n      <Input\r\n        ref={inputEl}\r\n        id='standard-basic'\r\n        name='title'\r\n        value={value}\r\n        onChange={handleChange}\r\n        isEdit={edit}\r\n        onFocus={(e) => e.target.select()}\r\n      />\r\n      {edit ? (\r\n        length > 1 ? (\r\n          <ButtonIcon onClick={() => onDelete(id)}>\r\n            <Icon.Cross />\r\n          </ButtonIcon>\r\n        ) : null\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\hooks\\useSelectState.js",["126","127"],"import React, { useReducer, useCallback } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nfunction stateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'create': {\r\n      return [...state, { value: `Вариант ${state.length + 1}`, id: nanoid() }]\r\n    }\r\n\r\n    case 'delete': {\r\n      return state.filter((item) => item.id !== action.id)\r\n    }\r\n\r\n    case 'edit': {\r\n      return state.map((item) => {\r\n        if (item.id === action.id) {\r\n          return { ...item, value: action.value }\r\n        }\r\n        return item\r\n      })\r\n    }\r\n    default:\r\n      break\r\n  }\r\n}\r\nconst initialState = [{ value: 'row 1', id: nanoid() }]\r\nexport function useSelectState(data = initialState) {\r\n  const [state, dispatch] = useReducer(stateReducer, data)\r\n\r\n  const addItem = () => dispatch({ type: 'create' })\r\n  const deleteItem = (id) => dispatch({ type: 'delete', id })\r\n  const editItem = (id, value) => dispatch({ type: 'edit', value, id })\r\n\r\n  return [state, addItem, deleteItem, editItem]\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormPage.js",[],"C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormGrid.js",["128"],"/** @jsxImportSource @emotion/react */\r\nimport React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst TD = styled.td`\r\n  height: 2.5em;\r\n  min-width: 48px;\r\n  padding: 0.25em;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  width: 120px;\r\n`\r\n\r\nexport default function ViewFormGrid({ columns, rows, type }) {\r\n  const tableSpace = [{ value: '&nbsp;' }, ...rows]\r\n  return (\r\n    <table css={{ borderCollapse: 'collapse' }}>\r\n      <tbody>\r\n        {rows.map((item, ind) => {\r\n          let head = null\r\n          if (ind === 0) {\r\n            head = (\r\n              <tr>\r\n                <TD>&nbsp;</TD>\r\n                {columns.map((column) => (\r\n                  <TD>{column.value}</TD>\r\n                ))}\r\n              </tr>\r\n            )\r\n          }\r\n          return (\r\n            <>\r\n              {head}\r\n              <tr\r\n                css={{\r\n                  backgroundColor: '#f8f9fa',\r\n                }}\r\n              >\r\n                <TD>{item.value}</TD>\r\n                {columns.map((column) => (\r\n                  <TD>\r\n                    <input type={type} name={item.value} />\r\n                  </TD>\r\n                ))}\r\n              </tr>\r\n            </>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\features\\question\\questionHead.js",["129","130","131","132","133","134"],"C:\\Front\\google-forms\\src\\app\\components\\Header.js",["135"],"C:\\Front\\google-forms\\src\\app\\components\\Container.js",["136","137","138"],"/** @jsxImportSource @emotion/react */\r\nimport React, { useState, useRef } from 'react'\r\nimport { useOnClickOutside } from '../hooks/useOnClickOutside'\r\nimport { EditStripe } from '../lib'\r\nimport { useContextEditMod } from './Wrapper'\r\n\r\nexport default function Container({ isHead, isView = false, children }) {\r\n  const [edit] = useContextEditMod()\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #dadce0',\r\n        padding: '25px 25px',\r\n        borderRadius: '8px',\r\n        textAlign: 'left',\r\n        position: 'relative',\r\n        marginBottom: '20px',\r\n      }}\r\n    >\r\n      {isHead ? (\r\n        <div\r\n          css={{\r\n            width: '100%',\r\n            top: '0',\r\n            right: '0',\r\n            height: '10px',\r\n            position: 'absolute',\r\n            borderTopLeftRadius: '8px',\r\n            borderTopRightRadius: '8px',\r\n            backgroundColor: 'rgb(103, 58, 183)',\r\n            zIndex: '10',\r\n          }}\r\n        ></div>\r\n      ) : null}\r\n      {edit ? <EditStripe /> : null}\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\components\\Wrapper.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionList.js",[],"C:\\Front\\google-forms\\src\\app\\hooks\\useQuestionState.js",["139"],"import React, { useReducer, useCallback } from 'react'\r\n\r\nfunction stateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'changeTitle':\r\n      return { ...state, title: action.payload }\r\n\r\n    case 'changeQuestionType':\r\n      return { ...state, type: action.payload }\r\n\r\n    case 'changeParameters': {\r\n      const [params, type] = action.payload\r\n      return {\r\n        ...state,\r\n        parameters: { ...state.parameters, [type]: params },\r\n      }\r\n    }\r\n\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default function useQuestionState(data) {\r\n  const [state, dispatch] = useReducer(stateReducer, data)\r\n\r\n  const changeTitle = useCallback(\r\n    (value) => dispatch({ type: 'changeTitle', payload: value }),\r\n    []\r\n  )\r\n\r\n  const changeQuestionType = useCallback(\r\n    (type) => dispatch({ type: 'changeQuestionType', payload: type }),\r\n    []\r\n  )\r\n\r\n  const changeParameters = useCallback(\r\n    (params, type) =>\r\n      dispatch({ type: 'changeParameters', payload: [params, type] }),\r\n    []\r\n  )\r\n\r\n  return [state, changeTitle, changeQuestionType, changeParameters]\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\reducers\\globalState.js",[],"C:\\Front\\google-forms\\src\\app\\hooks\\useGlobalState.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":11,"column":19,"nodeType":"146","messageId":"147","endLine":11,"endColumn":36},{"ruleId":"144","severity":1,"message":"148","line":2,"column":17,"nodeType":"146","messageId":"147","endLine":2,"endColumn":27},{"ruleId":"144","severity":1,"message":"149","line":2,"column":40,"nodeType":"146","messageId":"147","endLine":2,"endColumn":51},{"ruleId":"144","severity":1,"message":"150","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":13},{"ruleId":"144","severity":1,"message":"151","line":6,"column":10,"nodeType":"146","messageId":"147","endLine":6,"endColumn":24},{"ruleId":"144","severity":1,"message":"152","line":7,"column":26,"nodeType":"146","messageId":"147","endLine":7,"endColumn":32},{"ruleId":"144","severity":1,"message":"153","line":9,"column":13,"nodeType":"146","messageId":"147","endLine":9,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":61,"column":6,"nodeType":"156","endLine":61,"endColumn":19,"suggestions":"157"},{"ruleId":"144","severity":1,"message":"158","line":5,"column":10,"nodeType":"146","messageId":"147","endLine":5,"endColumn":16},{"ruleId":"144","severity":1,"message":"150","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":13},{"ruleId":"144","severity":1,"message":"159","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":13},{"ruleId":"144","severity":1,"message":"149","line":1,"column":29,"nodeType":"146","messageId":"147","endLine":1,"endColumn":40},{"ruleId":"144","severity":1,"message":"160","line":15,"column":9,"nodeType":"146","messageId":"147","endLine":15,"endColumn":19},{"ruleId":"144","severity":1,"message":"161","line":3,"column":17,"nodeType":"146","messageId":"147","endLine":3,"endColumn":25},{"ruleId":"144","severity":1,"message":"162","line":3,"column":27,"nodeType":"146","messageId":"147","endLine":3,"endColumn":37},{"ruleId":"144","severity":1,"message":"163","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":24},{"ruleId":"144","severity":1,"message":"164","line":5,"column":10,"nodeType":"146","messageId":"147","endLine":5,"endColumn":22},{"ruleId":"144","severity":1,"message":"165","line":6,"column":17,"nodeType":"146","messageId":"147","endLine":6,"endColumn":31},{"ruleId":"144","severity":1,"message":"166","line":6,"column":33,"nodeType":"146","messageId":"147","endLine":6,"endColumn":48},{"ruleId":"144","severity":1,"message":"150","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":13},{"ruleId":"144","severity":1,"message":"161","line":2,"column":17,"nodeType":"146","messageId":"147","endLine":2,"endColumn":25},{"ruleId":"144","severity":1,"message":"167","line":2,"column":27,"nodeType":"146","messageId":"147","endLine":2,"endColumn":33},{"ruleId":"144","severity":1,"message":"168","line":3,"column":10,"nodeType":"146","messageId":"147","endLine":3,"endColumn":27},{"ruleId":"144","severity":1,"message":"159","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":13},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'useContextEditMod' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'useCallback' is defined but never used.","'jsx' is defined but never used.","'useSelectState' is defined but never used.","'Button' is defined but never used.","'Icon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'grid'. Either include it or remove the dependency array.","ArrayExpression",["171"],"'nanoid' is defined but never used.","'React' is defined but never used.","'tableSpace' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'ContextEditMod' is defined but never used.","'TextareaGrey' is defined but never used.","'ContainerField' is defined but never used.","'EditStripeInput' is defined but never used.","'useRef' is defined but never used.","'useOnClickOutside' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},"Update the dependencies array to be: [state, mode, grid]",{"range":"174","text":"175"},[1710,1723],"[state, mode, grid]"]