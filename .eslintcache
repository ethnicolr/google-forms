[{"D:\\git\\google-forms\\src\\index.js":"1","D:\\git\\google-forms\\src\\reportWebVitals.js":"2","D:\\git\\google-forms\\src\\app\\App.js":"3","D:\\git\\google-forms\\src\\app\\QuestionItems.js":"4","D:\\git\\google-forms\\src\\app\\features\\question\\questionPage.js":"5","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js":"6","D:\\git\\google-forms\\src\\app\\hooks\\useOnClickOutside.js":"7","D:\\git\\google-forms\\src\\app\\lib.js":"8","D:\\git\\google-forms\\src\\app\\Header.js":"9","D:\\git\\google-forms\\src\\app\\Container.js":"10","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeRange.js":"11","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeText.js":"12","D:\\git\\google-forms\\src\\app\\features\\question\\questionSwitch.js":"13","D:\\git\\google-forms\\src\\app\\features\\question\\questionHeading.js":"14","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeSelectItem.js":"15","D:\\git\\google-forms\\src\\app\\components\\Select.js":"16","D:\\git\\google-forms\\src\\app\\components\\Option.js":"17","D:\\git\\google-forms\\src\\app\\hooks\\useLocalStorageState.js":"18","D:\\git\\google-forms\\src\\app\\hooks\\useQuestionState.js":"19","D:\\git\\google-forms\\src\\app\\hooks\\useSelectState.js":"20","D:\\git\\google-forms\\src\\app\\assets\\icons.js":"21"},{"size":446,"mtime":1611748184308,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1611591833466,"results":"24","hashOfConfig":"23"},{"size":1396,"mtime":1613925382107,"results":"25","hashOfConfig":"23"},{"size":1035,"mtime":1612187904115,"results":"26","hashOfConfig":"23"},{"size":3555,"mtime":1613925446839,"results":"27","hashOfConfig":"23"},{"size":1339,"mtime":1613660717907,"results":"28","hashOfConfig":"23"},{"size":418,"mtime":1612688572513,"results":"29","hashOfConfig":"23"},{"size":1711,"mtime":1613915949003,"results":"30","hashOfConfig":"23"},{"size":1236,"mtime":1613578431346,"results":"31","hashOfConfig":"23"},{"size":1516,"mtime":1613925371844,"results":"32","hashOfConfig":"23"},{"size":1511,"mtime":1612887088733,"results":"33","hashOfConfig":"23"},{"size":597,"mtime":1612887114063,"results":"34","hashOfConfig":"23"},{"size":1621,"mtime":1613655576146,"results":"35","hashOfConfig":"23"},{"size":576,"mtime":1613579308877,"results":"36","hashOfConfig":"23"},{"size":1758,"mtime":1613574502093,"results":"37","hashOfConfig":"23"},{"size":2213,"mtime":1613925757801,"results":"38","hashOfConfig":"23"},{"size":649,"mtime":1613925776249,"results":"39","hashOfConfig":"23"},{"size":1623,"mtime":1613655658459,"results":"40","hashOfConfig":"23"},{"size":1096,"mtime":1613654149493,"results":"41","hashOfConfig":"23"},{"size":944,"mtime":1613657334153,"results":"42","hashOfConfig":"23"},{"size":15540,"mtime":1613915136712,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"w2v8w3",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\git\\google-forms\\src\\index.js",[],["99","100"],"D:\\git\\google-forms\\src\\reportWebVitals.js",[],"D:\\git\\google-forms\\src\\app\\App.js",["101","102","103"],"D:\\git\\google-forms\\src\\app\\QuestionItems.js",["104","105","106"],"import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport { nanoid } from 'nanoid'\r\nimport QuestionSelect from './features/question/questionSelect'\r\nimport QuestionRange from './features/question/questionRange'\r\nimport QuestionText from './features/question/questionText'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '70%',\r\n  },\r\n})\r\n\r\nexport default function QuestionItems({ typeItems }) {\r\n  const classes = useStyles()\r\n\r\n  function renderSwitch(item) {\r\n    const [type, mode] = item.split('-')\r\n\r\n    switch (type) {\r\n      case 'text':\r\n        return <QuestionText mode={mode} />\r\n      case 'range':\r\n        return <QuestionRange />\r\n      case 'select':\r\n        return <QuestionSelect mode={mode} grid={false} />\r\n      case 'grid':\r\n        return <QuestionSelect mode={mode} grid={true} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return <div className={classes.root}>{renderSwitch(typeItems)}</div>\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionPage.js",["107","108","109","110"],"D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js",["111"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useEffect } from 'react'\r\nimport QestionSelectItem from './questionTypeSelectItem'\r\nimport { useContextEditMod } from '../../Container'\r\nimport { useSelectState } from './../../hooks/useSelectState'\r\nimport { List, ListItem, Button } from './../../lib'\r\n\r\nexport default function QuestionTypeSelect({\r\n  mode,\r\n  grid,\r\n  head,\r\n  updateParameters,\r\n  initialState,\r\n}) {\r\n  const [state, addItem, deleteItem, editItem] = useSelectState(initialState)\r\n  const edit = useContextEditMod()\r\n  useEffect(() => {\r\n    updateParameters(state, head)\r\n  }, [updateParameters, state, head])\r\n  return (\r\n    <div>\r\n      {grid ? <h4 css={{ color: '#000' }}>{head}</h4> : null}\r\n      <List>\r\n        {state.map((elem) => {\r\n          return (\r\n            <ListItem key={elem.id}>\r\n              <QestionSelectItem\r\n                initValue={elem.value}\r\n                id={elem.id}\r\n                onChange={editItem}\r\n                onDelete={deleteItem}\r\n                value={elem.value}\r\n              />\r\n            </ListItem>\r\n          )\r\n        })}\r\n      </List>\r\n      {edit ? (\r\n        <Button variant='contained' onClick={addItem}>\r\n          Добавить вариант\r\n        </Button>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\hooks\\useOnClickOutside.js",[],"D:\\git\\google-forms\\src\\app\\lib.js",[],"D:\\git\\google-forms\\src\\app\\Header.js",["112","113","114","115","116"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { useEditMod } from './Container'\r\nimport { Textarea, ContainerField, EditStripeInput } from './lib'\r\n\r\nconst defaultState = {\r\n  title: 'Новая форма',\r\n  desc: 'Описание',\r\n}\r\n\r\nexport default function Header({\r\n  edit,\r\n  changeStateHeader,\r\n  data = defaultState,\r\n}) {\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    changeStateHeader(name, value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <ContainerField>\r\n          <Textarea\r\n            spellCheck='false'\r\n            value={data.title}\r\n            onChange={handleChange}\r\n            name='title'\r\n            onFocus={(e) => e.target.select()}\r\n          />\r\n          {edit ? <EditStripeInput /> : null}\r\n        </ContainerField>\r\n\r\n        <ContainerField>\r\n          <Textarea\r\n            spellCheck='true'\r\n            onChange={handleChange}\r\n            name='desc'\r\n            value={data.desc}\r\n            onFocus={(e) => e.target.select()}\r\n          />\r\n          {edit ? <EditStripeInput /> : null}\r\n        </ContainerField>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\Container.js",["117"],"D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeRange.js",["118","119","120"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function QuestionTypeRange() {\r\n  const [range, setRagne] = useState({ from: 0, to: 10 })\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n\r\n    setRagne((range) => ({\r\n      ...range,\r\n      [name]: value,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FormControl>\r\n        <Select\r\n          labelId='demo-simple-select-label'\r\n          id='demo-simple-select'\r\n          value={range.from}\r\n          name='from'\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={0}>0</MenuItem>\r\n          <MenuItem value={1}>1</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      -\r\n      <FormControl>\r\n        <Select\r\n          labelId='demo-simple-select-label'\r\n          id='demo-simple-select'\r\n          value={range.to}\r\n          name='to'\r\n          onChange={handleChange}\r\n        >\r\n          {Array.from({ length: 10 }, (_, i) => i + 1).map((value) => (\r\n            <MenuItem key={nanoid()} value={value}>\r\n              {value}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeText.js",["121","122"],"import React from 'react'\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    color: '#000',\r\n  },\r\n})\r\nexport default function QuestionTypeText({ mode }) {\r\n  const classes = useStyles()\r\n\r\n  let text\r\n  if (mode === 'paragraph') {\r\n    text = 'Long answer text'\r\n  }\r\n  if (mode === 'line') {\r\n    text = 'Short answer text'\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 className={classes.title}>{text}</h2>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionSwitch.js",["123","124","125"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useState } from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport QuestionSelect from './questionTypeSelect'\r\nimport QuestionRange from './questionTypeRange'\r\nimport QuestionText from './questionTypeText'\r\n\r\nconst initialState = [{ value: 'Вариант 1', id: nanoid() }]\r\n\r\nexport default function QuestionSwitch({\r\n  typeItems,\r\n  updateParameters,\r\n  initialParam,\r\n}) {\r\n  function renderSwitch(item) {\r\n    const [type, mode] = item.split('-')\r\n\r\n    switch (type) {\r\n      case 'text':\r\n        return <QuestionText mode={mode} />\r\n      case 'range':\r\n        return <QuestionRange />\r\n      case 'select':\r\n        return (\r\n          <QuestionSelect\r\n            mode={mode}\r\n            grid={false}\r\n            updateParameters={updateParameters}\r\n            head={'items'}\r\n            initialState={initialParam.items}\r\n          />\r\n        )\r\n      case 'grid':\r\n        return (\r\n          <div css={{ display: 'flex' }}>\r\n            <QuestionSelect\r\n              mode={mode}\r\n              grid={true}\r\n              head={'column'}\r\n              initialState={initialParam.items}\r\n              updateParameters={updateParameters}\r\n            />\r\n            <QuestionSelect\r\n              mode={mode}\r\n              grid={true}\r\n              head={'row'}\r\n              initialState={initialParam.row}\r\n              updateParameters={updateParameters}\r\n            />{' '}\r\n          </div>\r\n        )\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return <>{renderSwitch(typeItems)}</>\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionHeading.js",["126","127","128","129"],"import React, { useState, useContext } from 'react'\r\nimport { ContextEditMod } from '../../Container'\r\nimport { TextareaGrey } from '../../lib'\r\nimport { Input, ContainerField, EditStripeInput } from '../../lib'\r\n\r\nexport default function QuestionHeading({ changeTitle, edit }) {\r\n  // const edit = useContext(ContextEditMod)\r\n  const handleChange = (e) => {\r\n    changeTitle(e.target.value)\r\n  }\r\n  return (\r\n    <ContainerField>\r\n      <Input placeholder='вопрос' onChange={handleChange} />\r\n\r\n      {edit ? <EditStripeInput /> : null}\r\n    </ContainerField>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeSelectItem.js",["130","131"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useEffect, useRef } from 'react'\r\nimport styled from '@emotion/styled'\r\n// import { useEditMod } from '../../Container'\r\n\r\n// import Input from '@material-ui/core/Input'\r\nimport { EditStripeInput } from '../../lib'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked'\r\n\r\nconst Input = styled.input`\r\n  padding: 0;\r\n  width: 100%;\r\n  heigt: 100%;\r\n  border: none;\r\n  outline: none;\r\n  padding: 15px 10px;\r\n  &:hover {\r\n    border-bottom: ${(props) =>\r\n      props.isEdit ? '1px solid rgba(0, 0, 0, 0.12)' : 'none'};\r\n  }\r\n`\r\n\r\nexport default function QuestionTypeSelectItem({\r\n  value,\r\n  onChange,\r\n  onDelete,\r\n  id,\r\n  type,\r\n  edit,\r\n}) {\r\n  const inputEl = useRef(null)\r\n  // const { edit } = useEditMod()\r\n  const handleChange = (e) => {\r\n    onChange(id, e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    inputEl.current.focus()\r\n    inputEl.current.select()\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n      }}\r\n    >\r\n      <RadioButtonUncheckedIcon color='disabled' />\r\n      <Input\r\n        ref={inputEl}\r\n        id='standard-basic'\r\n        name='title'\r\n        value={value}\r\n        onChange={handleChange}\r\n        isEdit={edit}\r\n        onFocus={(e) => e.target.select()}\r\n      />\r\n      {edit ? (\r\n        <IconButton aria-label='delete' onClick={() => onDelete(id)}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\components\\Select.js",["132"],"D:\\git\\google-forms\\src\\app\\components\\Option.js",[],"D:\\git\\google-forms\\src\\app\\hooks\\useLocalStorageState.js",["133"],"import { useState, useEffect, useReducer, useCallback } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nfunction stateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'addQuestion': {\r\n      const newQuestion = {\r\n        id: nanoid(),\r\n        title: '',\r\n        type: 'select-radio',\r\n        parameters: { items: [{ id: nanoid(), value: 'Вариант 1' }] },\r\n      }\r\n      return { ...state, questions: [...state.questions, newQuestion] }\r\n    }\r\n\r\n    case 'editQuestion': {\r\n      const { question } = action.payload\r\n      return {\r\n        ...state,\r\n        questions: state.questions.map((elem) =>\r\n          elem.id === question.id ? question : elem\r\n        ),\r\n      }\r\n    }\r\n\r\n    case 'editHeader': {\r\n      const [key, value] = action.payload\r\n      const header = { ...state.header, [key]: value }\r\n      return { ...state, header }\r\n    }\r\n\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport function useLocalStorageState(key, defaultValue = {}) {\r\n  function init(defaultValue) {\r\n    return JSON.parse(window.localStorage.getItem(key)) || defaultValue\r\n  }\r\n  const [state, dispatch] = useReducer(stateReducer, defaultValue, init)\r\n\r\n  const addQuestion = () => dispatch({ type: 'addQuestion' })\r\n  const editQuestion = useCallback(\r\n    (question) => dispatch({ type: 'editQuestion', payload: { question } }),\r\n    []\r\n  )\r\n  const editHeader = (key, value) =>\r\n    dispatch({ type: 'editHeader', payload: [key, value] })\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state))\r\n  }, [key, state])\r\n\r\n  return [state, addQuestion, editQuestion, editHeader]\r\n}\r\n","D:\\git\\google-forms\\src\\app\\hooks\\useQuestionState.js",["134"],"import React, { useReducer, useCallback } from 'react'\r\n\r\nfunction stateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'changeTitle':\r\n      return { ...state, title: action.payload }\r\n\r\n    case 'changeQuestionType':\r\n      return { ...state, type: action.payload }\r\n\r\n    case 'changeParameters': {\r\n      const [params, type] = action.payload\r\n      return {\r\n        ...state,\r\n        parameters: { ...state.parameters, [type]: params },\r\n      }\r\n    }\r\n\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport default function useQuestionState(data) {\r\n  const [state, dispatch] = useReducer(stateReducer, data)\r\n\r\n  const changeTitle = useCallback(\r\n    (value) => dispatch({ type: 'changeTitle', payload: value }),\r\n    []\r\n  )\r\n\r\n  const changeQuestionType = useCallback(\r\n    (type) => dispatch({ type: 'changeQuestionType', payload: type }),\r\n    []\r\n  )\r\n\r\n  const changeParameters = useCallback(\r\n    (params, type) =>\r\n      dispatch({ type: 'changeParameters', payload: [params, type] }),\r\n    []\r\n  )\r\n\r\n  return [state, changeTitle, changeQuestionType, changeParameters]\r\n}\r\n","D:\\git\\google-forms\\src\\app\\hooks\\useSelectState.js",["135","136"],"import React, { useReducer, useCallback } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nfunction stateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'create': {\r\n      return [...state, { value: `Вариант ${state.length + 1}`, id: nanoid() }]\r\n    }\r\n\r\n    case 'delete': {\r\n      return state.filter((item) => item.id !== action.id)\r\n    }\r\n\r\n    case 'edit': {\r\n      return state.map((item) => {\r\n        if (item.id === action.id) {\r\n          return { ...item, value: action.value }\r\n        }\r\n        return item\r\n      })\r\n    }\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport function useSelectState(data) {\r\n  const [state, dispatch] = useReducer(stateReducer, data)\r\n\r\n  const addItem = () => dispatch({ type: 'create' })\r\n  const deleteItem = (id) => dispatch({ type: 'delete', id })\r\n  const editItem = (id, value) => dispatch({ type: 'edit', value, id })\r\n\r\n  return [state, addItem, deleteItem, editItem]\r\n}\r\n",["137","138"],"D:\\git\\google-forms\\src\\app\\assets\\icons.js",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":3,"column":17,"nodeType":"145","messageId":"146","endLine":3,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":3,"column":27,"nodeType":"145","messageId":"146","endLine":3,"endColumn":38},{"ruleId":"143","severity":1,"message":"148","line":9,"column":10,"nodeType":"145","messageId":"146","endLine":9,"endColumn":16},{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"149","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":14},{"ruleId":"143","severity":1,"message":"148","line":3,"column":10,"nodeType":"145","messageId":"146","endLine":3,"endColumn":16},{"ruleId":"143","severity":1,"message":"144","line":2,"column":17,"nodeType":"145","messageId":"146","endLine":2,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":2,"column":38,"nodeType":"145","messageId":"146","endLine":2,"endColumn":49},{"ruleId":"143","severity":1,"message":"150","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":26},{"ruleId":"143","severity":1,"message":"151","line":14,"column":10,"nodeType":"145","messageId":"146","endLine":14,"endColumn":11},{"ruleId":"143","severity":1,"message":"152","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":13},{"ruleId":"143","severity":1,"message":"152","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":13},{"ruleId":"143","severity":1,"message":"153","line":3,"column":17,"nodeType":"145","messageId":"146","endLine":3,"endColumn":26},{"ruleId":"143","severity":1,"message":"144","line":3,"column":28,"nodeType":"145","messageId":"146","endLine":3,"endColumn":36},{"ruleId":"143","severity":1,"message":"154","line":3,"column":38,"nodeType":"145","messageId":"146","endLine":3,"endColumn":44},{"ruleId":"143","severity":1,"message":"155","line":4,"column":10,"nodeType":"145","messageId":"146","endLine":4,"endColumn":20},{"ruleId":"143","severity":1,"message":"153","line":2,"column":17,"nodeType":"145","messageId":"146","endLine":2,"endColumn":26},{"ruleId":"143","severity":1,"message":"156","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":20},{"ruleId":"143","severity":1,"message":"157","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":18},{"ruleId":"143","severity":1,"message":"158","line":5,"column":8,"nodeType":"145","messageId":"146","endLine":5,"endColumn":22},{"ruleId":"143","severity":1,"message":"159","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":24},{"ruleId":"143","severity":1,"message":"160","line":3,"column":8,"nodeType":"145","messageId":"146","endLine":3,"endColumn":17},{"ruleId":"143","severity":1,"message":"152","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":13},{"ruleId":"143","severity":1,"message":"144","line":3,"column":17,"nodeType":"145","messageId":"146","endLine":3,"endColumn":25},{"ruleId":"143","severity":1,"message":"161","line":9,"column":7,"nodeType":"145","messageId":"146","endLine":9,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"162","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":37},{"ruleId":"143","severity":1,"message":"163","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":24},{"ruleId":"143","severity":1,"message":"164","line":3,"column":10,"nodeType":"145","messageId":"146","endLine":3,"endColumn":22},{"ruleId":"143","severity":1,"message":"152","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":13},{"ruleId":"143","severity":1,"message":"165","line":8,"column":10,"nodeType":"145","messageId":"146","endLine":8,"endColumn":25},{"ruleId":"143","severity":1,"message":"152","line":2,"column":10,"nodeType":"145","messageId":"146","endLine":2,"endColumn":13},{"ruleId":"143","severity":1,"message":"144","line":1,"column":10,"nodeType":"145","messageId":"146","endLine":1,"endColumn":18},{"ruleId":"143","severity":1,"message":"166","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":13},{"ruleId":"143","severity":1,"message":"166","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":13},{"ruleId":"143","severity":1,"message":"147","line":1,"column":29,"nodeType":"145","messageId":"146","endLine":1,"endColumn":40},{"ruleId":"139","replacedBy":"167"},{"ruleId":"141","replacedBy":"168"},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'nanoid' is defined but never used.","'Button' is defined but never used.","'QuestionTypeSelect' is defined but never used.","'_' is assigned a value but never used.","'jsx' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useEditMod' is defined but never used.","'makeStyles' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'TextareaAutosize' is defined but never used.","'TextField' is defined but never used.","'initialState' is assigned a value but never used.","'useContext' is defined but never used.","'ContextEditMod' is defined but never used.","'TextareaGrey' is defined but never used.","'EditStripeInput' is defined but never used.","'React' is defined but never used.",["169"],["170"],"no-global-assign","no-unsafe-negation"]