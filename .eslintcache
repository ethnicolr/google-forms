[{"D:\\git\\google-forms\\src\\index.js":"1","D:\\git\\google-forms\\src\\reportWebVitals.js":"2","D:\\git\\google-forms\\src\\app\\App.js":"3","D:\\git\\google-forms\\src\\app\\Container.js":"4","D:\\git\\google-forms\\src\\app\\QuestionItems.js":"5","D:\\git\\google-forms\\src\\app\\features\\question\\questionPage.js":"6","D:\\git\\google-forms\\src\\app\\features\\question\\qestionInput.js":"7","D:\\git\\google-forms\\src\\app\\features\\question\\qestionOption.js":"8","D:\\git\\google-forms\\src\\app\\features\\question\\qestionSelectItem.js":"9","D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js":"10","D:\\git\\google-forms\\src\\app\\features\\question\\questionSelect.js":"11","D:\\git\\google-forms\\src\\app\\features\\question\\questionRange.js":"12","D:\\git\\google-forms\\src\\app\\features\\question\\questionText.js":"13"},{"size":446,"mtime":1611748184308,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1611591833466,"results":"16","hashOfConfig":"15"},{"size":505,"mtime":1612201672915,"results":"17","hashOfConfig":"15"},{"size":2336,"mtime":1612022315210,"results":"18","hashOfConfig":"15"},{"size":1035,"mtime":1612187904115,"results":"19","hashOfConfig":"15"},{"size":1357,"mtime":1612191276971,"results":"20","hashOfConfig":"15"},{"size":370,"mtime":1612190001322,"results":"21","hashOfConfig":"15"},{"size":1068,"mtime":1612191258647,"results":"22","hashOfConfig":"15"},{"size":933,"mtime":1612193359912,"results":"23","hashOfConfig":"15"},{"size":1464,"mtime":1612189464061,"results":"24","hashOfConfig":"15"},{"size":2149,"mtime":1612193295851,"results":"25","hashOfConfig":"15"},{"size":1507,"mtime":1611840832982,"results":"26","hashOfConfig":"15"},{"size":593,"mtime":1612202688567,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"w2v8w3",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"D:\\git\\google-forms\\src\\index.js",[],["60","61"],"D:\\git\\google-forms\\src\\reportWebVitals.js",[],"D:\\git\\google-forms\\src\\app\\App.js",[],"D:\\git\\google-forms\\src\\app\\Container.js",["62"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport Input from '@material-ui/core/Input'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    border: '2px solid black',\r\n    padding: '25px 15px',\r\n    borderRadius: '5px',\r\n    textAlign: 'left',\r\n    width: '500px',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    fontSize: '30px',\r\n  },\r\n  title: {\r\n    fontSize: '45px',\r\n    fontWeight: '400',\r\n    color: '#000',\r\n    padding: '1px',\r\n    margin: '0',\r\n  },\r\n})\r\n\r\nexport default function Container() {\r\n  const [edit, setEdit] = useState(true)\r\n  const [state, setState] = useState({\r\n    title: 'Новая форма',\r\n    desc: 'Описание',\r\n  })\r\n  const classes = useStyles()\r\n  const wrapperRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(e) {\r\n      if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {\r\n        setEdit((edit) => false)\r\n      } else {\r\n        setEdit((edit) => true)\r\n      }\r\n    }\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  })\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    setState((state) => ({\r\n      ...state,\r\n      [name]: value,\r\n    }))\r\n  }\r\n  return (\r\n    <div className={classes.root} ref={wrapperRef}>\r\n      {edit ? (\r\n        <form className={classes.form}>\r\n          <Input\r\n            id='standard-basic'\r\n            fullWidth\r\n            size='medium'\r\n            inputProps={{ style: { fontSize: '45px' } }}\r\n            name='title'\r\n            value={state.title}\r\n            onChange={handleChange}\r\n            variant='filled'\r\n          />\r\n          <Input\r\n            id='standard-basic'\r\n            fullWidth\r\n            className={classes.input}\r\n            inputProps={{ style: { fontSize: '35px' } }}\r\n            name='desc'\r\n            value={state.desc}\r\n            onChange={handleChange}\r\n          />\r\n        </form>\r\n      ) : (\r\n        <div>\r\n          <h1 className={classes.title}>{state.title}</h1>\r\n          <h1 className={classes.title}>{state.desc}</h1>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\QuestionItems.js",["63","64","65"],"import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport { nanoid } from 'nanoid'\r\nimport QuestionSelect from './features/question/questionSelect'\r\nimport QuestionRange from './features/question/questionRange'\r\nimport QuestionText from './features/question/questionText'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '70%',\r\n  },\r\n})\r\n\r\nexport default function QuestionItems({ typeItems }) {\r\n  const classes = useStyles()\r\n\r\n  function renderSwitch(item) {\r\n    const [type, mode] = item.split('-')\r\n\r\n    switch (type) {\r\n      case 'text':\r\n        return <QuestionText mode={mode} />\r\n      case 'range':\r\n        return <QuestionRange />\r\n      case 'select':\r\n        return <QuestionSelect mode={mode} grid={false} />\r\n      case 'grid':\r\n        return <QuestionSelect mode={mode} grid={true} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  return <div className={classes.root}>{renderSwitch(typeItems)}</div>\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionPage.js",["66"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport QuestionTypeSelect from './questionTypeSelect'\r\nimport QestionInput from './qestionInput'\r\nimport QestionOption from './qestionOption'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    border: '2px solid #dedede;',\r\n    backgroundColor: '#fff',\r\n    padding: '25px 15px',\r\n    borderRadius: '5px',\r\n    textAlign: 'left',\r\n    width: '500px',\r\n    marginTop: '25px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    flexWrap: 'wrap',\r\n  },\r\n  input: {\r\n    width: '60%',\r\n  },\r\n  select: {\r\n    width: '30%',\r\n  },\r\n  option: {\r\n    width: '100%',\r\n    marginTop: '30px',\r\n  },\r\n})\r\n\r\nexport default function QuestionPage() {\r\n  const [typeQuestion, setTypeQuestion] = useState('select-radio')\r\n\r\n  const handleSelect = (type) => {\r\n    setTypeQuestion(type)\r\n  }\r\n\r\n  const classes = useStyles()\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.input}>\r\n        <QestionInput />\r\n      </div>\r\n      <div className={classes.select}>\r\n        <QuestionTypeSelect onSelect={handleSelect} selected={typeQuestion} />\r\n      </div>\r\n      <div className={classes.option}>\r\n        <QestionOption typeItems={typeQuestion} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\qestionInput.js",["67","68"],"D:\\git\\google-forms\\src\\app\\features\\question\\qestionOption.js",["69","70","71","72","73"],"D:\\git\\google-forms\\src\\app\\features\\question\\qestionSelectItem.js",["74","75","76","77","78"],"D:\\git\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js",[],"D:\\git\\google-forms\\src\\app\\features\\question\\questionSelect.js",[],"D:\\git\\google-forms\\src\\app\\features\\question\\questionRange.js",["79","80","81"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function QuestionRange() {\r\n  const [range, setRagne] = useState({ from: 0, to: 10 })\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n\r\n    setRagne((range) => ({\r\n      ...range,\r\n      [name]: value,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FormControl>\r\n        <Select\r\n          labelId='demo-simple-select-label'\r\n          id='demo-simple-select'\r\n          value={range.from}\r\n          name='from'\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={0}>0</MenuItem>\r\n          <MenuItem value={1}>1</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      -\r\n      <FormControl>\r\n        <Select\r\n          labelId='demo-simple-select-label'\r\n          id='demo-simple-select'\r\n          value={range.to}\r\n          name='to'\r\n          onChange={handleChange}\r\n        >\r\n          {Array.from({ length: 10 }, (_, i) => i + 1).map((value) => (\r\n            <MenuItem key={nanoid()} value={value}>\r\n              {value}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\google-forms\\src\\app\\features\\question\\questionText.js",["82","83"],"import React from 'react'\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    color: '#000',\r\n  },\r\n})\r\nexport default function QuestionText({ mode }) {\r\n  const classes = useStyles()\r\n\r\n  let text\r\n  if (mode === 'paragraph') {\r\n    text = 'Long answer text'\r\n  }\r\n  if (mode === 'line') {\r\n    text = 'Short answer text'\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 className={classes.title}>{text}</h2>\r\n    </div>\r\n  )\r\n}\r\n",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":17},{"ruleId":"88","severity":1,"message":"92","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"93","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":14},{"ruleId":"88","severity":1,"message":"94","line":3,"column":10,"nodeType":"90","messageId":"91","endLine":3,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":17},{"ruleId":"88","severity":1,"message":"92","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"95","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":20},{"ruleId":"88","severity":1,"message":"92","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"93","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":14},{"ruleId":"88","severity":1,"message":"96","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":21},{"ruleId":"88","severity":1,"message":"97","line":10,"column":7,"nodeType":"90","messageId":"91","endLine":10,"endColumn":19},{"ruleId":"88","severity":1,"message":"98","line":17,"column":9,"nodeType":"90","messageId":"91","endLine":17,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":17},{"ruleId":"88","severity":1,"message":"95","line":4,"column":10,"nodeType":"90","messageId":"91","endLine":4,"endColumn":20},{"ruleId":"88","severity":1,"message":"93","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":14},{"ruleId":"88","severity":1,"message":"99","line":6,"column":8,"nodeType":"90","messageId":"91","endLine":6,"endColumn":18},{"ruleId":"88","severity":1,"message":"100","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":18},{"ruleId":"88","severity":1,"message":"95","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":20},{"ruleId":"88","severity":1,"message":"101","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":18},{"ruleId":"88","severity":1,"message":"102","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":22},{"ruleId":"88","severity":1,"message":"103","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":24},{"ruleId":"88","severity":1,"message":"89","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":17},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Button' is defined but never used.","'nanoid' is defined but never used.","'makeStyles' is defined but never used.","'QiestionInput' is defined but never used.","'initialState' is assigned a value but never used.","'classes' is assigned a value but never used.","'IconButton' is defined but never used.","'DeleteIcon' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'TextareaAutosize' is defined but never used.","no-global-assign","no-unsafe-negation"]