[{"C:\\Front\\google-forms\\src\\index.js":"1","C:\\Front\\google-forms\\src\\reportWebVitals.js":"2","C:\\Front\\google-forms\\src\\app\\App.js":"3","C:\\Front\\google-forms\\src\\app\\Header.js":"4","C:\\Front\\google-forms\\src\\app\\Container.js":"5","C:\\Front\\google-forms\\src\\app\\hooks\\useLocalStorageState.js":"6","C:\\Front\\google-forms\\src\\app\\features\\question\\questionPage.js":"7","C:\\Front\\google-forms\\src\\app\\lib.js":"8","C:\\Front\\google-forms\\src\\app\\hooks\\useOnClickOutside.js":"9","C:\\Front\\google-forms\\src\\app\\features\\question\\questionHeading.js":"10","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRender.js":"11","C:\\Front\\google-forms\\src\\app\\features\\question\\questionSwitch.js":"12","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js":"13","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRange.js":"14","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeText.js":"15","C:\\Front\\google-forms\\src\\app\\components\\Select.js":"16","C:\\Front\\google-forms\\src\\app\\components\\Option.js":"17","C:\\Front\\google-forms\\src\\app\\assets\\icons.js":"18","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelectItem.js":"19","C:\\Front\\google-forms\\src\\app\\hooks\\useSelectState.js":"20","C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormPage.js":"21","C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormGrid.js":"22"},{"size":458,"mtime":1614504544179,"results":"23","hashOfConfig":"24"},{"size":375,"mtime":1614504544179,"results":"25","hashOfConfig":"24"},{"size":1968,"mtime":1614520216696,"results":"26","hashOfConfig":"24"},{"size":1236,"mtime":1614504544171,"results":"27","hashOfConfig":"24"},{"size":1585,"mtime":1614504544170,"results":"28","hashOfConfig":"24"},{"size":2976,"mtime":1614504544177,"results":"29","hashOfConfig":"24"},{"size":2449,"mtime":1614527675514,"results":"30","hashOfConfig":"24"},{"size":1711,"mtime":1614504544178,"results":"31","hashOfConfig":"24"},{"size":430,"mtime":1614504544177,"results":"32","hashOfConfig":"24"},{"size":576,"mtime":1614504544173,"results":"33","hashOfConfig":"24"},{"size":1692,"mtime":1614527746352,"results":"34","hashOfConfig":"24"},{"size":1565,"mtime":1614523452963,"results":"35","hashOfConfig":"24"},{"size":1479,"mtime":1614527823406,"results":"36","hashOfConfig":"24"},{"size":1511,"mtime":1614504544176,"results":"37","hashOfConfig":"24"},{"size":597,"mtime":1614504544177,"results":"38","hashOfConfig":"24"},{"size":2213,"mtime":1614504544173,"results":"39","hashOfConfig":"24"},{"size":521,"mtime":1614504544173,"results":"40","hashOfConfig":"24"},{"size":15540,"mtime":1614504544172,"results":"41","hashOfConfig":"24"},{"size":1792,"mtime":1614504544177,"results":"42","hashOfConfig":"24"},{"size":1043,"mtime":1614527926155,"results":"43","hashOfConfig":"24"},{"size":1604,"mtime":1614534137458,"results":"44","hashOfConfig":"24"},{"size":904,"mtime":1614534168174,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"2k6uk2",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Front\\google-forms\\src\\index.js",[],["99","100"],"C:\\Front\\google-forms\\src\\reportWebVitals.js",[],"C:\\Front\\google-forms\\src\\app\\App.js",["101","102","103","104","105"],"/** @jsxImportSource @emotion/react */\r\n\r\nimport React, { useState, useCallback } from 'react'\r\nimport './App.css'\r\nimport Header from './Header'\r\nimport Container from './Container'\r\nimport QuestionPage from './features/question/questionPage'\r\nimport Button from '@material-ui/core/Button'\r\nimport { nanoid } from 'nanoid'\r\nimport { useLocalStorageState } from './hooks/useLocalStorageState'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\r\nimport ViewForm from './features/view/viewFormPage'\r\n\r\nexport const StateContex = React.createContext()\r\n\r\nconst initialState = {\r\n  questions: [],\r\n  header: { title: 'Новая форма', desc: 'Описание' },\r\n}\r\n\r\nfunction App() {\r\n  const {\r\n    state,\r\n    addQuestion,\r\n    editQuestion,\r\n    editHeader,\r\n    deleteQuestion,\r\n    cloneQuestion,\r\n  } = useLocalStorageState('formData', initialState)\r\n\r\n  const value = { state, editQuestion, deleteQuestion, cloneQuestion }\r\n\r\n  return (\r\n    <Router>\r\n      <div css={{ margin: '100px auto', width: '650px' }}>\r\n        <StateContex.Provider value={value}>\r\n          <Route exact path='/'>\r\n            <Container isHead={true}>\r\n              <Header data={state.header} changeStateHeader={editHeader} />\r\n            </Container>\r\n\r\n            {state.questions.map((item) => {\r\n              return (\r\n                <Container key={item.id}>\r\n                  <QuestionPage data={item} />\r\n                </Container>\r\n              )\r\n            })}\r\n            <Button onClick={addQuestion} variant='contained'>\r\n              Add question\r\n            </Button>\r\n            <button onClick={() => window.open('/view')}>View</button>\r\n          </Route>\r\n          <Route exact path='/view'>\r\n            <ViewForm />\r\n          </Route>\r\n        </StateContex.Provider>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport function useContextState() {\r\n  return React.useContext(StateContex)\r\n}\r\n\r\nexport default App\r\n","C:\\Front\\google-forms\\src\\app\\Header.js",["106","107","108","109","110"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { useEditMod } from './Container'\r\nimport { Textarea, ContainerField, EditStripeInput } from './lib'\r\n\r\nconst defaultState = {\r\n  title: 'Новая форма',\r\n  desc: 'Описание',\r\n}\r\n\r\nexport default function Header({\r\n  edit,\r\n  changeStateHeader,\r\n  data = defaultState,\r\n}) {\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    changeStateHeader(name, value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <ContainerField>\r\n          <Textarea\r\n            spellCheck='false'\r\n            value={data.title}\r\n            onChange={handleChange}\r\n            name='title'\r\n            onFocus={(e) => e.target.select()}\r\n          />\r\n          {edit ? <EditStripeInput /> : null}\r\n        </ContainerField>\r\n\r\n        <ContainerField>\r\n          <Textarea\r\n            spellCheck='true'\r\n            onChange={handleChange}\r\n            name='desc'\r\n            value={data.desc}\r\n            onFocus={(e) => e.target.select()}\r\n          />\r\n          {edit ? <EditStripeInput /> : null}\r\n        </ContainerField>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\Container.js",[],"C:\\Front\\google-forms\\src\\app\\hooks\\useLocalStorageState.js",["111"],"import { useState, useEffect, useReducer, useCallback } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nfunction stateReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'ADD_QUESTION': {\r\n      const newQuestion = {\r\n        id: nanoid(),\r\n        title: '',\r\n        type: 'select-radio',\r\n        parameters: { items: [{ id: nanoid(), value: 'Вариант 1' }] },\r\n      }\r\n      return { ...state, questions: [...state.questions, newQuestion] }\r\n    }\r\n\r\n    case 'DELETE_QUESTION': {\r\n      const filterQuestions = state.questions.filter(\r\n        (question) => question.id !== action.payload\r\n      )\r\n      return { ...state, questions: filterQuestions }\r\n    }\r\n\r\n    case 'ClONE_QUESTION': {\r\n      const question = state.questions.find(\r\n        (question) => question.id === action.payload\r\n      )\r\n      const cloned = (question, newObj) => {\r\n        const keys = Object.keys(question)\r\n        return keys.reduce((result, key) => {\r\n          let value = question[key]\r\n          if (Array.isArray(value)) {\r\n            result[key] = cloned(value, [])\r\n          } else if (typeof value === 'object') {\r\n            result[key] = cloned(value, {})\r\n          }\r\n          if (key === 'id') {\r\n            result[key] = nanoid()\r\n          } else {\r\n            result[key] = value\r\n          }\r\n\r\n          return result\r\n        }, newObj)\r\n      }\r\n      let newQuestion = cloned(question, {})\r\n      return { ...state, questions: [...state.questions, newQuestion] }\r\n    }\r\n\r\n    case 'EDIT_QUESTION': {\r\n      const { question } = action.payload\r\n      return {\r\n        ...state,\r\n        questions: state.questions.map((elem) =>\r\n          elem.id === question.id ? question : elem\r\n        ),\r\n      }\r\n    }\r\n\r\n    case 'EDIT_HEADER': {\r\n      const [key, value] = action.payload\r\n      const header = { ...state.header, [key]: value }\r\n      return { ...state, header }\r\n    }\r\n\r\n    default:\r\n      break\r\n  }\r\n}\r\n\r\nexport function useLocalStorageState(key, defaultValue = {}) {\r\n  function init(defaultValue) {\r\n    return JSON.parse(window.localStorage.getItem(key)) || defaultValue\r\n  }\r\n  const [state, dispatch] = useReducer(stateReducer, defaultValue, init)\r\n\r\n  const addQuestion = () => dispatch({ type: 'ADD_QUESTION' })\r\n  const deleteQuestion = useCallback((id) => {\r\n    return dispatch({ type: 'DELETE_QUESTION', payload: id })\r\n  }, [])\r\n\r\n  const cloneQuestion = useCallback((id) => {\r\n    return dispatch({ type: 'ClONE_QUESTION', payload: id })\r\n  }, [])\r\n\r\n  const editQuestion = useCallback(\r\n    (question) => dispatch({ type: 'EDIT_QUESTION', payload: { question } }),\r\n    []\r\n  )\r\n  const editHeader = (key, value) =>\r\n    dispatch({ type: 'EDIT_HEADER', payload: [key, value] })\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state))\r\n  }, [key, state])\r\n\r\n  return {\r\n    state,\r\n    addQuestion,\r\n    editQuestion,\r\n    editHeader,\r\n    deleteQuestion,\r\n    cloneQuestion,\r\n  }\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\features\\question\\questionPage.js",[],"C:\\Front\\google-forms\\src\\app\\lib.js",[],"C:\\Front\\google-forms\\src\\app\\hooks\\useOnClickOutside.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionHeading.js",["112","113","114","115"],"import React, { useState, useContext } from 'react'\r\nimport { ContextEditMod } from '../../Container'\r\nimport { TextareaGrey } from '../../lib'\r\nimport { Input, ContainerField, EditStripeInput } from '../../lib'\r\n\r\nexport default function QuestionHeading({ changeTitle, edit }) {\r\n  // const edit = useContext(ContextEditMod)\r\n  const handleChange = (e) => {\r\n    changeTitle(e.target.value)\r\n  }\r\n  return (\r\n    <ContainerField>\r\n      <Input placeholder='вопрос' onChange={handleChange} />\r\n\r\n      {edit ? <EditStripeInput /> : null}\r\n    </ContainerField>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRender.js",["116","117","118"],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionSwitch.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelect.js",["119"],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeRange.js",["120","121","122"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default function QuestionTypeRange() {\r\n  const [range, setRagne] = useState({ from: 0, to: 10 })\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target\r\n\r\n    setRagne((range) => ({\r\n      ...range,\r\n      [name]: value,\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FormControl>\r\n        <Select\r\n          labelId='demo-simple-select-label'\r\n          id='demo-simple-select'\r\n          value={range.from}\r\n          name='from'\r\n          onChange={handleChange}\r\n        >\r\n          <MenuItem value={0}>0</MenuItem>\r\n          <MenuItem value={1}>1</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n      -\r\n      <FormControl>\r\n        <Select\r\n          labelId='demo-simple-select-label'\r\n          id='demo-simple-select'\r\n          value={range.to}\r\n          name='to'\r\n          onChange={handleChange}\r\n        >\r\n          {Array.from({ length: 10 }, (_, i) => i + 1).map((value) => (\r\n            <MenuItem key={nanoid()} value={value}>\r\n              {value}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeText.js",["123","124"],"import React from 'react'\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    color: '#000',\r\n  },\r\n})\r\nexport default function QuestionTypeText({ mode }) {\r\n  const classes = useStyles()\r\n\r\n  let text\r\n  if (mode === 'paragraph') {\r\n    text = 'Long answer text'\r\n  }\r\n  if (mode === 'line') {\r\n    text = 'Short answer text'\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 className={classes.title}>{text}</h2>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\components\\Select.js",["125"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useState } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst SeparatorLine = styled.div`\r\n  border-top: 1px solid rgba(0, 0, 0, 0.12);\r\n  margin: 8px 0;\r\n`\r\nexport default function Select({ children, onChange }) {\r\n  const [hidden, setHidden] = useState(false)\r\n  const [selected, setSelected] = useState(children[0].props.children)\r\n\r\n  const toggle = () => setHidden(!hidden)\r\n\r\n  const handleClick = (value, children) => {\r\n    onChange(value)\r\n    setSelected(children)\r\n    toggle()\r\n  }\r\n\r\n  function options() {\r\n    let type = null\r\n    return React.Children.map(children, (child) => {\r\n      if (typeof child.type === 'string') return child\r\n      const isSelect = child.props.value === selected\r\n      const newChild = React.cloneElement(child, {\r\n        handleClick,\r\n        isSelect,\r\n      })\r\n      const typeItem = newChild.props.value.split('-')[0]\r\n      if (type !== null && type !== typeItem) {\r\n        type = typeItem\r\n        return (\r\n          <>\r\n            <SeparatorLine />\r\n            {newChild}\r\n          </>\r\n        )\r\n      }\r\n      type = typeItem\r\n      return newChild\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        css={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          padding: '15px 10px 15px 15px',\r\n          width: '100%',\r\n          background: 'none',\r\n          outline: 'none',\r\n          border: '1px solid #dadce0',\r\n          borderRadius: '5px',\r\n        }}\r\n        onClick={toggle}\r\n      >\r\n        {React.Children.map(selected, (item) => item)}\r\n      </button>\r\n      <ul\r\n        css={{\r\n          display: hidden ? 'flex' : 'none',\r\n          width: '310px',\r\n          flexDirection: 'column',\r\n          position: 'absolute',\r\n          zIndex: '5',\r\n          background: '#ffffff',\r\n          color: '#000',\r\n          listStyle: 'none',\r\n          borderRadius: '4px',\r\n          boxShadow:\r\n            '0 1px 2px 0 rgba(60, 64, 67, 0.302), 0 2px 6px 2px rgba(60, 64, 67, 0.149)',\r\n          fontSize: '15px',\r\n          padding: 0,\r\n        }}\r\n      >\r\n        {options()}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\components\\Option.js",[],"C:\\Front\\google-forms\\src\\app\\assets\\icons.js",[],"C:\\Front\\google-forms\\src\\app\\features\\question\\questionTypeSelectItem.js",["126","127","128"],"/** @jsxImportSource @emotion/react */\r\nimport { jsx } from '@emotion/react'\r\nimport React, { useEffect, useRef } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { useContextEditMod } from './../../Container'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { Radio, CheckBox } from './../../assets/icons'\r\n\r\nconst Input = styled.input`\r\n  padding: 0;\r\n  width: 100%;\r\n  heigt: 100%;\r\n  border: none;\r\n  outline: none;\r\n  padding: 15px 10px;\r\n  &:hover {\r\n    border-bottom: ${(props) =>\r\n      props.isEdit ? '1px solid rgba(0, 0, 0, 0.12)' : 'none'};\r\n  }\r\n`\r\n\r\nexport default function QuestionTypeSelectItem({\r\n  value,\r\n  onChange,\r\n  onDelete,\r\n  id,\r\n  type,\r\n  index,\r\n  length,\r\n}) {\r\n  const inputEl = useRef(null)\r\n  const [edit] = useContextEditMod()\r\n\r\n  const handleChange = (e) => {\r\n    onChange(id, e.target.value)\r\n  }\r\n  useEffect(() => {\r\n    inputEl.current.focus()\r\n    inputEl.current.select()\r\n  }, [])\r\n\r\n  const IconType = (type) => {\r\n    const icons = {\r\n      radio: <Radio />,\r\n      drop: `${index + 1}.`,\r\n      check: <CheckBox />,\r\n    }\r\n    return icons[type]\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={{\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n      }}\r\n    >\r\n      {IconType(type)}\r\n      <Input\r\n        ref={inputEl}\r\n        id='standard-basic'\r\n        name='title'\r\n        value={value}\r\n        onChange={handleChange}\r\n        isEdit={edit}\r\n        onFocus={(e) => e.target.select()}\r\n      />\r\n      {edit ? (\r\n        length > 1 ? (\r\n          <button onClick={() => onDelete(id)}>Delete</button>\r\n        ) : null\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\google-forms\\src\\app\\hooks\\useSelectState.js",["129","130"],"C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormPage.js",[],"C:\\Front\\google-forms\\src\\app\\features\\view\\viewFormGrid.js",["131"],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":3,"column":17,"nodeType":"138","messageId":"139","endLine":3,"endColumn":25},{"ruleId":"136","severity":1,"message":"140","line":3,"column":27,"nodeType":"138","messageId":"139","endLine":3,"endColumn":38},{"ruleId":"136","severity":1,"message":"141","line":9,"column":10,"nodeType":"138","messageId":"139","endLine":9,"endColumn":16},{"ruleId":"136","severity":1,"message":"142","line":11,"column":35,"nodeType":"138","messageId":"139","endLine":11,"endColumn":41},{"ruleId":"136","severity":1,"message":"143","line":11,"column":50,"nodeType":"138","messageId":"139","endLine":11,"endColumn":54},{"ruleId":"136","severity":1,"message":"144","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"145","line":3,"column":17,"nodeType":"138","messageId":"139","endLine":3,"endColumn":26},{"ruleId":"136","severity":1,"message":"137","line":3,"column":28,"nodeType":"138","messageId":"139","endLine":3,"endColumn":36},{"ruleId":"136","severity":1,"message":"146","line":3,"column":38,"nodeType":"138","messageId":"139","endLine":3,"endColumn":44},{"ruleId":"136","severity":1,"message":"147","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":18},{"ruleId":"136","severity":1,"message":"137","line":1,"column":17,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"148","line":1,"column":27,"nodeType":"138","messageId":"139","endLine":1,"endColumn":37},{"ruleId":"136","severity":1,"message":"149","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":24},{"ruleId":"136","severity":1,"message":"150","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":22},{"ruleId":"136","severity":1,"message":"144","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"137","line":3,"column":17,"nodeType":"138","messageId":"139","endLine":3,"endColumn":25},{"ruleId":"136","severity":1,"message":"151","line":9,"column":7,"nodeType":"138","messageId":"139","endLine":9,"endColumn":19},{"ruleId":"136","severity":1,"message":"144","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"152","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":20},{"ruleId":"136","severity":1,"message":"153","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":18},{"ruleId":"136","severity":1,"message":"154","line":5,"column":8,"nodeType":"138","messageId":"139","endLine":5,"endColumn":22},{"ruleId":"136","severity":1,"message":"155","line":2,"column":8,"nodeType":"138","messageId":"139","endLine":2,"endColumn":24},{"ruleId":"136","severity":1,"message":"156","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":17},{"ruleId":"136","severity":1,"message":"144","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"144","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"157","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":18},{"ruleId":"136","severity":1,"message":"158","line":7,"column":8,"nodeType":"138","messageId":"139","endLine":7,"endColumn":18},{"ruleId":"136","severity":1,"message":"159","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},{"ruleId":"136","severity":1,"message":"140","line":1,"column":29,"nodeType":"138","messageId":"139","endLine":1,"endColumn":40},{"ruleId":"136","severity":1,"message":"160","line":4,"column":9,"nodeType":"138","messageId":"139","endLine":4,"endColumn":19},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'nanoid' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","'jsx' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useEditMod' is defined but never used.","'useContext' is defined but never used.","'ContextEditMod' is defined but never used.","'TextareaGrey' is defined but never used.","'initialState' is assigned a value but never used.","'makeStyles' is defined but never used.","'InputLabel' is defined but never used.","'FormHelperText' is defined but never used.","'TextareaAutosize' is defined but never used.","'TextField' is defined but never used.","'IconButton' is defined but never used.","'DeleteIcon' is defined but never used.","'React' is defined but never used.","'tableSpace' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]